<?php
/**
 * ServerAffiliation
 *
 * PHP version 8.1
 *
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\CurseForgeApi\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Aternos\CurseForgeApi\ObjectSerializer;

/**
 * ServerAffiliation Class Doc Comment
 *
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ServerAffiliation implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ServerAffiliation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'is_enabled' => 'bool',
        'is_default_banner' => 'bool',
        'has_discount' => 'bool',
        'affiliation_service' => '\Aternos\CurseForgeApi\Model\AffiliationServiceType',
        'default_banner_custom_title' => 'string',
        'custom_image_url' => 'string',
        'affiliation_link' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'is_enabled' => null,
        'is_default_banner' => null,
        'has_discount' => null,
        'affiliation_service' => null,
        'default_banner_custom_title' => null,
        'custom_image_url' => 'uri',
        'affiliation_link' => 'uri'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'is_enabled' => false,
        'is_default_banner' => false,
        'has_discount' => false,
        'affiliation_service' => false,
        'default_banner_custom_title' => false,
        'custom_image_url' => false,
        'affiliation_link' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'is_enabled' => 'isEnabled',
        'is_default_banner' => 'isDefaultBanner',
        'has_discount' => 'hasDiscount',
        'affiliation_service' => 'affiliationService',
        'default_banner_custom_title' => 'defaultBannerCustomTitle',
        'custom_image_url' => 'customImageUrl',
        'affiliation_link' => 'affiliationLink'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'is_enabled' => 'setIsEnabled',
        'is_default_banner' => 'setIsDefaultBanner',
        'has_discount' => 'setHasDiscount',
        'affiliation_service' => 'setAffiliationService',
        'default_banner_custom_title' => 'setDefaultBannerCustomTitle',
        'custom_image_url' => 'setCustomImageUrl',
        'affiliation_link' => 'setAffiliationLink'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'is_enabled' => 'getIsEnabled',
        'is_default_banner' => 'getIsDefaultBanner',
        'has_discount' => 'getHasDiscount',
        'affiliation_service' => 'getAffiliationService',
        'default_banner_custom_title' => 'getDefaultBannerCustomTitle',
        'custom_image_url' => 'getCustomImageUrl',
        'affiliation_link' => 'getAffiliationLink'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_enabled', $data ?? [], null);
        $this->setIfExists('is_default_banner', $data ?? [], null);
        $this->setIfExists('has_discount', $data ?? [], null);
        $this->setIfExists('affiliation_service', $data ?? [], null);
        $this->setIfExists('default_banner_custom_title', $data ?? [], null);
        $this->setIfExists('custom_image_url', $data ?? [], null);
        $this->setIfExists('affiliation_link', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_enabled
     *
     * @return bool|null
     */
    public function getIsEnabled(): ?bool
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool|null $is_enabled Whether the server affiliate program is enabled for this mod
     *
     * @return $this
     */
    public function setIsEnabled(?bool $is_enabled): static
    {
        if (is_null($is_enabled)) {
            throw new InvalidArgumentException('non-nullable is_enabled cannot be null');
        }
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets is_default_banner
     *
     * @return bool|null
     */
    public function getIsDefaultBanner(): ?bool
    {
        return $this->container['is_default_banner'];
    }

    /**
     * Sets is_default_banner
     *
     * @param bool|null $is_default_banner is_default_banner
     *
     * @return $this
     */
    public function setIsDefaultBanner(?bool $is_default_banner): static
    {
        if (is_null($is_default_banner)) {
            throw new InvalidArgumentException('non-nullable is_default_banner cannot be null');
        }
        $this->container['is_default_banner'] = $is_default_banner;

        return $this;
    }

    /**
     * Gets has_discount
     *
     * @return bool|null
     */
    public function getHasDiscount(): ?bool
    {
        return $this->container['has_discount'];
    }

    /**
     * Sets has_discount
     *
     * @param bool|null $has_discount has_discount
     *
     * @return $this
     */
    public function setHasDiscount(?bool $has_discount): static
    {
        if (is_null($has_discount)) {
            throw new InvalidArgumentException('non-nullable has_discount cannot be null');
        }
        $this->container['has_discount'] = $has_discount;

        return $this;
    }

    /**
     * Gets affiliation_service
     *
     * @return \Aternos\CurseForgeApi\Model\AffiliationServiceType|null
     */
    public function getAffiliationService(): ?\Aternos\CurseForgeApi\Model\AffiliationServiceType
    {
        return $this->container['affiliation_service'];
    }

    /**
     * Sets affiliation_service
     *
     * @param \Aternos\CurseForgeApi\Model\AffiliationServiceType|null $affiliation_service affiliation_service
     *
     * @return $this
     */
    public function setAffiliationService(?\Aternos\CurseForgeApi\Model\AffiliationServiceType $affiliation_service): static
    {
        if (is_null($affiliation_service)) {
            throw new InvalidArgumentException('non-nullable affiliation_service cannot be null');
        }
        $this->container['affiliation_service'] = $affiliation_service;

        return $this;
    }

    /**
     * Gets default_banner_custom_title
     *
     * @return string|null
     */
    public function getDefaultBannerCustomTitle(): ?string
    {
        return $this->container['default_banner_custom_title'];
    }

    /**
     * Sets default_banner_custom_title
     *
     * @param string|null $default_banner_custom_title default_banner_custom_title
     *
     * @return $this
     */
    public function setDefaultBannerCustomTitle(?string $default_banner_custom_title): static
    {
        if (is_null($default_banner_custom_title)) {
            throw new InvalidArgumentException('non-nullable default_banner_custom_title cannot be null');
        }
        $this->container['default_banner_custom_title'] = $default_banner_custom_title;

        return $this;
    }

    /**
     * Gets custom_image_url
     *
     * @return string|null
     */
    public function getCustomImageUrl(): ?string
    {
        return $this->container['custom_image_url'];
    }

    /**
     * Sets custom_image_url
     *
     * @param string|null $custom_image_url custom_image_url
     *
     * @return $this
     */
    public function setCustomImageUrl(?string $custom_image_url): static
    {
        if (is_null($custom_image_url)) {
            throw new InvalidArgumentException('non-nullable custom_image_url cannot be null');
        }
        $this->container['custom_image_url'] = $custom_image_url;

        return $this;
    }

    /**
     * Gets affiliation_link
     *
     * @return string|null
     */
    public function getAffiliationLink(): ?string
    {
        return $this->container['affiliation_link'];
    }

    /**
     * Sets affiliation_link
     *
     * @param string|null $affiliation_link affiliation_link
     *
     * @return $this
     */
    public function setAffiliationLink(?string $affiliation_link): static
    {
        if (is_null($affiliation_link)) {
            throw new InvalidArgumentException('non-nullable affiliation_link cannot be null');
        }
        $this->container['affiliation_link'] = $affiliation_link;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


