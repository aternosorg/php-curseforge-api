<?php
/**
 * FingerprintMatchesResult
 *
 * PHP version 8.1
 *
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\CurseForgeApi\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Aternos\CurseForgeApi\ObjectSerializer;

/**
 * FingerprintMatchesResult Class Doc Comment
 *
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class FingerprintMatchesResult implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'FingerprintMatchesResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'is_cache_built' => 'bool',
        'exact_matches' => '\Aternos\CurseForgeApi\Model\FingerprintMatch[]',
        'exact_fingerprints' => 'int[]',
        'partial_matches' => '\Aternos\CurseForgeApi\Model\FingerprintMatch[]',
        'partial_match_fingerprints' => 'array<string,int[]>',
        'installed_fingerprints' => 'int[]',
        'unmatched_fingerprints' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'is_cache_built' => null,
        'exact_matches' => null,
        'exact_fingerprints' => 'int64',
        'partial_matches' => null,
        'partial_match_fingerprints' => 'int64',
        'installed_fingerprints' => 'int64',
        'unmatched_fingerprints' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'is_cache_built' => false,
        'exact_matches' => false,
        'exact_fingerprints' => false,
        'partial_matches' => false,
        'partial_match_fingerprints' => false,
        'installed_fingerprints' => false,
        'unmatched_fingerprints' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'is_cache_built' => 'isCacheBuilt',
        'exact_matches' => 'exactMatches',
        'exact_fingerprints' => 'exactFingerprints',
        'partial_matches' => 'partialMatches',
        'partial_match_fingerprints' => 'partialMatchFingerprints',
        'installed_fingerprints' => 'installedFingerprints',
        'unmatched_fingerprints' => 'unmatchedFingerprints'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'is_cache_built' => 'setIsCacheBuilt',
        'exact_matches' => 'setExactMatches',
        'exact_fingerprints' => 'setExactFingerprints',
        'partial_matches' => 'setPartialMatches',
        'partial_match_fingerprints' => 'setPartialMatchFingerprints',
        'installed_fingerprints' => 'setInstalledFingerprints',
        'unmatched_fingerprints' => 'setUnmatchedFingerprints'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'is_cache_built' => 'getIsCacheBuilt',
        'exact_matches' => 'getExactMatches',
        'exact_fingerprints' => 'getExactFingerprints',
        'partial_matches' => 'getPartialMatches',
        'partial_match_fingerprints' => 'getPartialMatchFingerprints',
        'installed_fingerprints' => 'getInstalledFingerprints',
        'unmatched_fingerprints' => 'getUnmatchedFingerprints'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_cache_built', $data ?? [], null);
        $this->setIfExists('exact_matches', $data ?? [], null);
        $this->setIfExists('exact_fingerprints', $data ?? [], null);
        $this->setIfExists('partial_matches', $data ?? [], null);
        $this->setIfExists('partial_match_fingerprints', $data ?? [], null);
        $this->setIfExists('installed_fingerprints', $data ?? [], null);
        $this->setIfExists('unmatched_fingerprints', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_cache_built
     *
     * @return bool|null
     */
    public function getIsCacheBuilt(): ?bool
    {
        return $this->container['is_cache_built'];
    }

    /**
     * Sets is_cache_built
     *
     * @param bool|null $is_cache_built is_cache_built
     *
     * @return $this
     */
    public function setIsCacheBuilt(?bool $is_cache_built): static
    {
        if (is_null($is_cache_built)) {
            throw new InvalidArgumentException('non-nullable is_cache_built cannot be null');
        }
        $this->container['is_cache_built'] = $is_cache_built;

        return $this;
    }

    /**
     * Gets exact_matches
     *
     * @return \Aternos\CurseForgeApi\Model\FingerprintMatch[]|null
     */
    public function getExactMatches(): ?array
    {
        return $this->container['exact_matches'];
    }

    /**
     * Sets exact_matches
     *
     * @param \Aternos\CurseForgeApi\Model\FingerprintMatch[]|null $exact_matches exact_matches
     *
     * @return $this
     */
    public function setExactMatches(?array $exact_matches): static
    {
        if (is_null($exact_matches)) {
            throw new InvalidArgumentException('non-nullable exact_matches cannot be null');
        }
        $this->container['exact_matches'] = $exact_matches;

        return $this;
    }

    /**
     * Gets exact_fingerprints
     *
     * @return int[]|null
     */
    public function getExactFingerprints(): ?array
    {
        return $this->container['exact_fingerprints'];
    }

    /**
     * Sets exact_fingerprints
     *
     * @param int[]|null $exact_fingerprints exact_fingerprints
     *
     * @return $this
     */
    public function setExactFingerprints(?array $exact_fingerprints): static
    {
        if (is_null($exact_fingerprints)) {
            throw new InvalidArgumentException('non-nullable exact_fingerprints cannot be null');
        }
        $this->container['exact_fingerprints'] = $exact_fingerprints;

        return $this;
    }

    /**
     * Gets partial_matches
     *
     * @return \Aternos\CurseForgeApi\Model\FingerprintMatch[]|null
     */
    public function getPartialMatches(): ?array
    {
        return $this->container['partial_matches'];
    }

    /**
     * Sets partial_matches
     *
     * @param \Aternos\CurseForgeApi\Model\FingerprintMatch[]|null $partial_matches partial_matches
     *
     * @return $this
     */
    public function setPartialMatches(?array $partial_matches): static
    {
        if (is_null($partial_matches)) {
            throw new InvalidArgumentException('non-nullable partial_matches cannot be null');
        }
        $this->container['partial_matches'] = $partial_matches;

        return $this;
    }

    /**
     * Gets partial_match_fingerprints
     *
     * @return array<string,int[]>|null
     */
    public function getPartialMatchFingerprints(): ?array
    {
        return $this->container['partial_match_fingerprints'];
    }

    /**
     * Sets partial_match_fingerprints
     *
     * @param array<string,int[]>|null $partial_match_fingerprints partial_match_fingerprints
     *
     * @return $this
     */
    public function setPartialMatchFingerprints(?array $partial_match_fingerprints): static
    {
        if (is_null($partial_match_fingerprints)) {
            throw new InvalidArgumentException('non-nullable partial_match_fingerprints cannot be null');
        }
        $this->container['partial_match_fingerprints'] = $partial_match_fingerprints;

        return $this;
    }

    /**
     * Gets installed_fingerprints
     *
     * @return int[]|null
     */
    public function getInstalledFingerprints(): ?array
    {
        return $this->container['installed_fingerprints'];
    }

    /**
     * Sets installed_fingerprints
     *
     * @param int[]|null $installed_fingerprints installed_fingerprints
     *
     * @return $this
     */
    public function setInstalledFingerprints(?array $installed_fingerprints): static
    {
        if (is_null($installed_fingerprints)) {
            throw new InvalidArgumentException('non-nullable installed_fingerprints cannot be null');
        }
        $this->container['installed_fingerprints'] = $installed_fingerprints;

        return $this;
    }

    /**
     * Gets unmatched_fingerprints
     *
     * @return int[]|null
     */
    public function getUnmatchedFingerprints(): ?array
    {
        return $this->container['unmatched_fingerprints'];
    }

    /**
     * Sets unmatched_fingerprints
     *
     * @param int[]|null $unmatched_fingerprints unmatched_fingerprints
     *
     * @return $this
     */
    public function setUnmatchedFingerprints(?array $unmatched_fingerprints): static
    {
        if (is_null($unmatched_fingerprints)) {
            throw new InvalidArgumentException('non-nullable unmatched_fingerprints cannot be null');
        }
        $this->container['unmatched_fingerprints'] = $unmatched_fingerprints;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


