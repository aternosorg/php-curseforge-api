<?php
/**
 * MinecraftGameVersion
 *
 * PHP version 8.1
 *
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\CurseForgeApi\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Aternos\CurseForgeApi\ObjectSerializer;

/**
 * MinecraftGameVersion Class Doc Comment
 *
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class MinecraftGameVersion implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'MinecraftGameVersion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'game_version_id' => 'int',
        'version_string' => 'string',
        'jar_download_url' => 'string',
        'json_download_url' => 'string',
        'approved' => 'bool',
        'date_modified' => '\DateTime',
        'game_version_type_id' => 'int',
        'game_version_status' => '\Aternos\CurseForgeApi\Model\GameVersionStatus',
        'game_version_type_status' => '\Aternos\CurseForgeApi\Model\GameVersionTypeStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'int32',
        'game_version_id' => 'int32',
        'version_string' => null,
        'jar_download_url' => 'uri',
        'json_download_url' => 'uri',
        'approved' => null,
        'date_modified' => 'date-time',
        'game_version_type_id' => 'int32',
        'game_version_status' => null,
        'game_version_type_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'game_version_id' => false,
        'version_string' => false,
        'jar_download_url' => false,
        'json_download_url' => false,
        'approved' => false,
        'date_modified' => false,
        'game_version_type_id' => false,
        'game_version_status' => false,
        'game_version_type_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'game_version_id' => 'gameVersionId',
        'version_string' => 'versionString',
        'jar_download_url' => 'jarDownloadUrl',
        'json_download_url' => 'jsonDownloadUrl',
        'approved' => 'approved',
        'date_modified' => 'dateModified',
        'game_version_type_id' => 'gameVersionTypeId',
        'game_version_status' => 'gameVersionStatus',
        'game_version_type_status' => 'gameVersionTypeStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'game_version_id' => 'setGameVersionId',
        'version_string' => 'setVersionString',
        'jar_download_url' => 'setJarDownloadUrl',
        'json_download_url' => 'setJsonDownloadUrl',
        'approved' => 'setApproved',
        'date_modified' => 'setDateModified',
        'game_version_type_id' => 'setGameVersionTypeId',
        'game_version_status' => 'setGameVersionStatus',
        'game_version_type_status' => 'setGameVersionTypeStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'game_version_id' => 'getGameVersionId',
        'version_string' => 'getVersionString',
        'jar_download_url' => 'getJarDownloadUrl',
        'json_download_url' => 'getJsonDownloadUrl',
        'approved' => 'getApproved',
        'date_modified' => 'getDateModified',
        'game_version_type_id' => 'getGameVersionTypeId',
        'game_version_status' => 'getGameVersionStatus',
        'game_version_type_status' => 'getGameVersionTypeStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('game_version_id', $data ?? [], null);
        $this->setIfExists('version_string', $data ?? [], null);
        $this->setIfExists('jar_download_url', $data ?? [], null);
        $this->setIfExists('json_download_url', $data ?? [], null);
        $this->setIfExists('approved', $data ?? [], null);
        $this->setIfExists('date_modified', $data ?? [], null);
        $this->setIfExists('game_version_type_id', $data ?? [], null);
        $this->setIfExists('game_version_status', $data ?? [], null);
        $this->setIfExists('game_version_type_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets game_version_id
     *
     * @return int|null
     */
    public function getGameVersionId(): ?int
    {
        return $this->container['game_version_id'];
    }

    /**
     * Sets game_version_id
     *
     * @param int|null $game_version_id game_version_id
     *
     * @return $this
     */
    public function setGameVersionId(?int $game_version_id): static
    {
        if (is_null($game_version_id)) {
            throw new InvalidArgumentException('non-nullable game_version_id cannot be null');
        }
        $this->container['game_version_id'] = $game_version_id;

        return $this;
    }

    /**
     * Gets version_string
     *
     * @return string|null
     */
    public function getVersionString(): ?string
    {
        return $this->container['version_string'];
    }

    /**
     * Sets version_string
     *
     * @param string|null $version_string version_string
     *
     * @return $this
     */
    public function setVersionString(?string $version_string): static
    {
        if (is_null($version_string)) {
            throw new InvalidArgumentException('non-nullable version_string cannot be null');
        }
        $this->container['version_string'] = $version_string;

        return $this;
    }

    /**
     * Gets jar_download_url
     *
     * @return string|null
     */
    public function getJarDownloadUrl(): ?string
    {
        return $this->container['jar_download_url'];
    }

    /**
     * Sets jar_download_url
     *
     * @param string|null $jar_download_url jar_download_url
     *
     * @return $this
     */
    public function setJarDownloadUrl(?string $jar_download_url): static
    {
        if (is_null($jar_download_url)) {
            throw new InvalidArgumentException('non-nullable jar_download_url cannot be null');
        }
        $this->container['jar_download_url'] = $jar_download_url;

        return $this;
    }

    /**
     * Gets json_download_url
     *
     * @return string|null
     */
    public function getJsonDownloadUrl(): ?string
    {
        return $this->container['json_download_url'];
    }

    /**
     * Sets json_download_url
     *
     * @param string|null $json_download_url json_download_url
     *
     * @return $this
     */
    public function setJsonDownloadUrl(?string $json_download_url): static
    {
        if (is_null($json_download_url)) {
            throw new InvalidArgumentException('non-nullable json_download_url cannot be null');
        }
        $this->container['json_download_url'] = $json_download_url;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool|null
     */
    public function getApproved(): ?bool
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool|null $approved approved
     *
     * @return $this
     */
    public function setApproved(?bool $approved): static
    {
        if (is_null($approved)) {
            throw new InvalidArgumentException('non-nullable approved cannot be null');
        }
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return \DateTime|null
     */
    public function getDateModified(): ?\DateTime
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param \DateTime|null $date_modified date_modified
     *
     * @return $this
     */
    public function setDateModified(?\DateTime $date_modified): static
    {
        if (is_null($date_modified)) {
            throw new InvalidArgumentException('non-nullable date_modified cannot be null');
        }
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets game_version_type_id
     *
     * @return int|null
     */
    public function getGameVersionTypeId(): ?int
    {
        return $this->container['game_version_type_id'];
    }

    /**
     * Sets game_version_type_id
     *
     * @param int|null $game_version_type_id game_version_type_id
     *
     * @return $this
     */
    public function setGameVersionTypeId(?int $game_version_type_id): static
    {
        if (is_null($game_version_type_id)) {
            throw new InvalidArgumentException('non-nullable game_version_type_id cannot be null');
        }
        $this->container['game_version_type_id'] = $game_version_type_id;

        return $this;
    }

    /**
     * Gets game_version_status
     *
     * @return \Aternos\CurseForgeApi\Model\GameVersionStatus|null
     */
    public function getGameVersionStatus(): ?\Aternos\CurseForgeApi\Model\GameVersionStatus
    {
        return $this->container['game_version_status'];
    }

    /**
     * Sets game_version_status
     *
     * @param \Aternos\CurseForgeApi\Model\GameVersionStatus|null $game_version_status game_version_status
     *
     * @return $this
     */
    public function setGameVersionStatus(?\Aternos\CurseForgeApi\Model\GameVersionStatus $game_version_status): static
    {
        if (is_null($game_version_status)) {
            throw new InvalidArgumentException('non-nullable game_version_status cannot be null');
        }
        $this->container['game_version_status'] = $game_version_status;

        return $this;
    }

    /**
     * Gets game_version_type_status
     *
     * @return \Aternos\CurseForgeApi\Model\GameVersionTypeStatus|null
     */
    public function getGameVersionTypeStatus(): ?\Aternos\CurseForgeApi\Model\GameVersionTypeStatus
    {
        return $this->container['game_version_type_status'];
    }

    /**
     * Sets game_version_type_status
     *
     * @param \Aternos\CurseForgeApi\Model\GameVersionTypeStatus|null $game_version_type_status game_version_type_status
     *
     * @return $this
     */
    public function setGameVersionTypeStatus(?\Aternos\CurseForgeApi\Model\GameVersionTypeStatus $game_version_type_status): static
    {
        if (is_null($game_version_type_status)) {
            throw new InvalidArgumentException('non-nullable game_version_type_status cannot be null');
        }
        $this->container['game_version_type_status'] = $game_version_type_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


