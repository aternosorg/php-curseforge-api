<?php
/**
 * File
 *
 * PHP version 8.1
 *
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\CurseForgeApi\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Aternos\CurseForgeApi\ObjectSerializer;

/**
 * File Class Doc Comment
 *
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class File implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'File';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'game_id' => 'int',
        'mod_id' => 'int',
        'is_available' => 'bool',
        'display_name' => 'string',
        'file_name' => 'string',
        'release_type' => '\Aternos\CurseForgeApi\Model\FileReleaseType',
        'file_status' => '\Aternos\CurseForgeApi\Model\FileStatus',
        'hashes' => '\Aternos\CurseForgeApi\Model\FileHash[]',
        'file_date' => '\DateTime',
        'file_length' => 'int',
        'file_size_on_disk' => 'int',
        'download_count' => 'int',
        'download_url' => 'string',
        'game_versions' => 'string[]',
        'sortable_game_versions' => '\Aternos\CurseForgeApi\Model\SortableGameVersion[]',
        'dependencies' => '\Aternos\CurseForgeApi\Model\FileDependency[]',
        'expose_as_alternative' => 'bool',
        'parent_project_file_id' => 'int',
        'alternate_file_id' => 'int',
        'is_server_pack' => 'bool',
        'server_pack_file_id' => 'int',
        'is_early_access_content' => 'bool',
        'early_access_end_date' => '\DateTime',
        'file_fingerprint' => 'int',
        'modules' => '\Aternos\CurseForgeApi\Model\FileModule[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => 'int32',
        'game_id' => 'int32',
        'mod_id' => 'int32',
        'is_available' => null,
        'display_name' => null,
        'file_name' => null,
        'release_type' => null,
        'file_status' => null,
        'hashes' => null,
        'file_date' => 'date-time',
        'file_length' => 'int64',
        'file_size_on_disk' => 'int64',
        'download_count' => 'int64',
        'download_url' => 'uri',
        'game_versions' => null,
        'sortable_game_versions' => null,
        'dependencies' => null,
        'expose_as_alternative' => null,
        'parent_project_file_id' => 'int32',
        'alternate_file_id' => 'int32',
        'is_server_pack' => null,
        'server_pack_file_id' => 'int32',
        'is_early_access_content' => null,
        'early_access_end_date' => 'date-time',
        'file_fingerprint' => 'int64',
        'modules' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'game_id' => false,
        'mod_id' => false,
        'is_available' => false,
        'display_name' => false,
        'file_name' => false,
        'release_type' => false,
        'file_status' => false,
        'hashes' => false,
        'file_date' => false,
        'file_length' => false,
        'file_size_on_disk' => true,
        'download_count' => false,
        'download_url' => true,
        'game_versions' => false,
        'sortable_game_versions' => false,
        'dependencies' => false,
        'expose_as_alternative' => true,
        'parent_project_file_id' => true,
        'alternate_file_id' => true,
        'is_server_pack' => true,
        'server_pack_file_id' => true,
        'is_early_access_content' => true,
        'early_access_end_date' => true,
        'file_fingerprint' => false,
        'modules' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'game_id' => 'gameId',
        'mod_id' => 'modId',
        'is_available' => 'isAvailable',
        'display_name' => 'displayName',
        'file_name' => 'fileName',
        'release_type' => 'releaseType',
        'file_status' => 'fileStatus',
        'hashes' => 'hashes',
        'file_date' => 'fileDate',
        'file_length' => 'fileLength',
        'file_size_on_disk' => 'fileSizeOnDisk',
        'download_count' => 'downloadCount',
        'download_url' => 'downloadUrl',
        'game_versions' => 'gameVersions',
        'sortable_game_versions' => 'sortableGameVersions',
        'dependencies' => 'dependencies',
        'expose_as_alternative' => 'exposeAsAlternative',
        'parent_project_file_id' => 'parentProjectFileId',
        'alternate_file_id' => 'alternateFileId',
        'is_server_pack' => 'isServerPack',
        'server_pack_file_id' => 'serverPackFileId',
        'is_early_access_content' => 'isEarlyAccessContent',
        'early_access_end_date' => 'earlyAccessEndDate',
        'file_fingerprint' => 'fileFingerprint',
        'modules' => 'modules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'game_id' => 'setGameId',
        'mod_id' => 'setModId',
        'is_available' => 'setIsAvailable',
        'display_name' => 'setDisplayName',
        'file_name' => 'setFileName',
        'release_type' => 'setReleaseType',
        'file_status' => 'setFileStatus',
        'hashes' => 'setHashes',
        'file_date' => 'setFileDate',
        'file_length' => 'setFileLength',
        'file_size_on_disk' => 'setFileSizeOnDisk',
        'download_count' => 'setDownloadCount',
        'download_url' => 'setDownloadUrl',
        'game_versions' => 'setGameVersions',
        'sortable_game_versions' => 'setSortableGameVersions',
        'dependencies' => 'setDependencies',
        'expose_as_alternative' => 'setExposeAsAlternative',
        'parent_project_file_id' => 'setParentProjectFileId',
        'alternate_file_id' => 'setAlternateFileId',
        'is_server_pack' => 'setIsServerPack',
        'server_pack_file_id' => 'setServerPackFileId',
        'is_early_access_content' => 'setIsEarlyAccessContent',
        'early_access_end_date' => 'setEarlyAccessEndDate',
        'file_fingerprint' => 'setFileFingerprint',
        'modules' => 'setModules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'game_id' => 'getGameId',
        'mod_id' => 'getModId',
        'is_available' => 'getIsAvailable',
        'display_name' => 'getDisplayName',
        'file_name' => 'getFileName',
        'release_type' => 'getReleaseType',
        'file_status' => 'getFileStatus',
        'hashes' => 'getHashes',
        'file_date' => 'getFileDate',
        'file_length' => 'getFileLength',
        'file_size_on_disk' => 'getFileSizeOnDisk',
        'download_count' => 'getDownloadCount',
        'download_url' => 'getDownloadUrl',
        'game_versions' => 'getGameVersions',
        'sortable_game_versions' => 'getSortableGameVersions',
        'dependencies' => 'getDependencies',
        'expose_as_alternative' => 'getExposeAsAlternative',
        'parent_project_file_id' => 'getParentProjectFileId',
        'alternate_file_id' => 'getAlternateFileId',
        'is_server_pack' => 'getIsServerPack',
        'server_pack_file_id' => 'getServerPackFileId',
        'is_early_access_content' => 'getIsEarlyAccessContent',
        'early_access_end_date' => 'getEarlyAccessEndDate',
        'file_fingerprint' => 'getFileFingerprint',
        'modules' => 'getModules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('game_id', $data ?? [], null);
        $this->setIfExists('mod_id', $data ?? [], null);
        $this->setIfExists('is_available', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('release_type', $data ?? [], null);
        $this->setIfExists('file_status', $data ?? [], null);
        $this->setIfExists('hashes', $data ?? [], null);
        $this->setIfExists('file_date', $data ?? [], null);
        $this->setIfExists('file_length', $data ?? [], null);
        $this->setIfExists('file_size_on_disk', $data ?? [], null);
        $this->setIfExists('download_count', $data ?? [], null);
        $this->setIfExists('download_url', $data ?? [], null);
        $this->setIfExists('game_versions', $data ?? [], null);
        $this->setIfExists('sortable_game_versions', $data ?? [], null);
        $this->setIfExists('dependencies', $data ?? [], null);
        $this->setIfExists('expose_as_alternative', $data ?? [], null);
        $this->setIfExists('parent_project_file_id', $data ?? [], null);
        $this->setIfExists('alternate_file_id', $data ?? [], null);
        $this->setIfExists('is_server_pack', $data ?? [], null);
        $this->setIfExists('server_pack_file_id', $data ?? [], null);
        $this->setIfExists('is_early_access_content', $data ?? [], null);
        $this->setIfExists('early_access_end_date', $data ?? [], null);
        $this->setIfExists('file_fingerprint', $data ?? [], null);
        $this->setIfExists('modules', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The file id
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets game_id
     *
     * @return int|null
     */
    public function getGameId(): ?int
    {
        return $this->container['game_id'];
    }

    /**
     * Sets game_id
     *
     * @param int|null $game_id The game id related to the mod that this file belongs to
     *
     * @return $this
     */
    public function setGameId(?int $game_id): static
    {
        if (is_null($game_id)) {
            throw new InvalidArgumentException('non-nullable game_id cannot be null');
        }
        $this->container['game_id'] = $game_id;

        return $this;
    }

    /**
     * Gets mod_id
     *
     * @return int|null
     */
    public function getModId(): ?int
    {
        return $this->container['mod_id'];
    }

    /**
     * Sets mod_id
     *
     * @param int|null $mod_id The mod id
     *
     * @return $this
     */
    public function setModId(?int $mod_id): static
    {
        if (is_null($mod_id)) {
            throw new InvalidArgumentException('non-nullable mod_id cannot be null');
        }
        $this->container['mod_id'] = $mod_id;

        return $this;
    }

    /**
     * Gets is_available
     *
     * @return bool|null
     */
    public function getIsAvailable(): ?bool
    {
        return $this->container['is_available'];
    }

    /**
     * Sets is_available
     *
     * @param bool|null $is_available Whether the file is available to download
     *
     * @return $this
     */
    public function setIsAvailable(?bool $is_available): static
    {
        if (is_null($is_available)) {
            throw new InvalidArgumentException('non-nullable is_available cannot be null');
        }
        $this->container['is_available'] = $is_available;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName(): ?string
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Display name of the file
     *
     * @return $this
     */
    public function setDisplayName(?string $display_name): static
    {
        if (is_null($display_name)) {
            throw new InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName(): ?string
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name Exact file name
     *
     * @return $this
     */
    public function setFileName(?string $file_name): static
    {
        if (is_null($file_name)) {
            throw new InvalidArgumentException('non-nullable file_name cannot be null');
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets release_type
     *
     * @return \Aternos\CurseForgeApi\Model\FileReleaseType|null
     */
    public function getReleaseType(): ?\Aternos\CurseForgeApi\Model\FileReleaseType
    {
        return $this->container['release_type'];
    }

    /**
     * Sets release_type
     *
     * @param \Aternos\CurseForgeApi\Model\FileReleaseType|null $release_type release_type
     *
     * @return $this
     */
    public function setReleaseType(?\Aternos\CurseForgeApi\Model\FileReleaseType $release_type): static
    {
        if (is_null($release_type)) {
            throw new InvalidArgumentException('non-nullable release_type cannot be null');
        }
        $this->container['release_type'] = $release_type;

        return $this;
    }

    /**
     * Gets file_status
     *
     * @return \Aternos\CurseForgeApi\Model\FileStatus|null
     */
    public function getFileStatus(): ?\Aternos\CurseForgeApi\Model\FileStatus
    {
        return $this->container['file_status'];
    }

    /**
     * Sets file_status
     *
     * @param \Aternos\CurseForgeApi\Model\FileStatus|null $file_status file_status
     *
     * @return $this
     */
    public function setFileStatus(?\Aternos\CurseForgeApi\Model\FileStatus $file_status): static
    {
        if (is_null($file_status)) {
            throw new InvalidArgumentException('non-nullable file_status cannot be null');
        }
        $this->container['file_status'] = $file_status;

        return $this;
    }

    /**
     * Gets hashes
     *
     * @return \Aternos\CurseForgeApi\Model\FileHash[]|null
     */
    public function getHashes(): ?array
    {
        return $this->container['hashes'];
    }

    /**
     * Sets hashes
     *
     * @param \Aternos\CurseForgeApi\Model\FileHash[]|null $hashes The file hash (i.e. md5 or sha1)
     *
     * @return $this
     */
    public function setHashes(?array $hashes): static
    {
        if (is_null($hashes)) {
            throw new InvalidArgumentException('non-nullable hashes cannot be null');
        }
        $this->container['hashes'] = $hashes;

        return $this;
    }

    /**
     * Gets file_date
     *
     * @return \DateTime|null
     */
    public function getFileDate(): ?\DateTime
    {
        return $this->container['file_date'];
    }

    /**
     * Sets file_date
     *
     * @param \DateTime|null $file_date The file timestamp
     *
     * @return $this
     */
    public function setFileDate(?\DateTime $file_date): static
    {
        if (is_null($file_date)) {
            throw new InvalidArgumentException('non-nullable file_date cannot be null');
        }
        $this->container['file_date'] = $file_date;

        return $this;
    }

    /**
     * Gets file_length
     *
     * @return int|null
     */
    public function getFileLength(): ?int
    {
        return $this->container['file_length'];
    }

    /**
     * Sets file_length
     *
     * @param int|null $file_length The file length in bytes
     *
     * @return $this
     */
    public function setFileLength(?int $file_length): static
    {
        if (is_null($file_length)) {
            throw new InvalidArgumentException('non-nullable file_length cannot be null');
        }
        $this->container['file_length'] = $file_length;

        return $this;
    }

    /**
     * Gets file_size_on_disk
     *
     * @return int|null
     */
    public function getFileSizeOnDisk(): ?int
    {
        return $this->container['file_size_on_disk'];
    }

    /**
     * Sets file_size_on_disk
     *
     * @param int|null $file_size_on_disk The file's size on disk
     *
     * @return $this
     */
    public function setFileSizeOnDisk(?int $file_size_on_disk): static
    {
        if (is_null($file_size_on_disk)) {
            array_push($this->openAPINullablesSetToNull, 'file_size_on_disk');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_size_on_disk', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['file_size_on_disk'] = $file_size_on_disk;

        return $this;
    }

    /**
     * Gets download_count
     *
     * @return int|null
     */
    public function getDownloadCount(): ?int
    {
        return $this->container['download_count'];
    }

    /**
     * Sets download_count
     *
     * @param int|null $download_count The number of downloads for the file
     *
     * @return $this
     */
    public function setDownloadCount(?int $download_count): static
    {
        if (is_null($download_count)) {
            throw new InvalidArgumentException('non-nullable download_count cannot be null');
        }
        $this->container['download_count'] = $download_count;

        return $this;
    }

    /**
     * Gets download_url
     *
     * @return string|null
     */
    public function getDownloadUrl(): ?string
    {
        return $this->container['download_url'];
    }

    /**
     * Sets download_url
     *
     * @param string|null $download_url download_url
     *
     * @return $this
     */
    public function setDownloadUrl(?string $download_url): static
    {
        if (is_null($download_url)) {
            array_push($this->openAPINullablesSetToNull, 'download_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('download_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['download_url'] = $download_url;

        return $this;
    }

    /**
     * Gets game_versions
     *
     * @return string[]|null
     */
    public function getGameVersions(): ?array
    {
        return $this->container['game_versions'];
    }

    /**
     * Sets game_versions
     *
     * @param string[]|null $game_versions List of game versions this file is relevant for
     *
     * @return $this
     */
    public function setGameVersions(?array $game_versions): static
    {
        if (is_null($game_versions)) {
            throw new InvalidArgumentException('non-nullable game_versions cannot be null');
        }
        $this->container['game_versions'] = $game_versions;

        return $this;
    }

    /**
     * Gets sortable_game_versions
     *
     * @return \Aternos\CurseForgeApi\Model\SortableGameVersion[]|null
     */
    public function getSortableGameVersions(): ?array
    {
        return $this->container['sortable_game_versions'];
    }

    /**
     * Sets sortable_game_versions
     *
     * @param \Aternos\CurseForgeApi\Model\SortableGameVersion[]|null $sortable_game_versions Metadata used for sorting by game versions
     *
     * @return $this
     */
    public function setSortableGameVersions(?array $sortable_game_versions): static
    {
        if (is_null($sortable_game_versions)) {
            throw new InvalidArgumentException('non-nullable sortable_game_versions cannot be null');
        }
        $this->container['sortable_game_versions'] = $sortable_game_versions;

        return $this;
    }

    /**
     * Gets dependencies
     *
     * @return \Aternos\CurseForgeApi\Model\FileDependency[]|null
     */
    public function getDependencies(): ?array
    {
        return $this->container['dependencies'];
    }

    /**
     * Sets dependencies
     *
     * @param \Aternos\CurseForgeApi\Model\FileDependency[]|null $dependencies List of dependencies files
     *
     * @return $this
     */
    public function setDependencies(?array $dependencies): static
    {
        if (is_null($dependencies)) {
            throw new InvalidArgumentException('non-nullable dependencies cannot be null');
        }
        $this->container['dependencies'] = $dependencies;

        return $this;
    }

    /**
     * Gets expose_as_alternative
     *
     * @return bool|null
     */
    public function getExposeAsAlternative(): ?bool
    {
        return $this->container['expose_as_alternative'];
    }

    /**
     * Sets expose_as_alternative
     *
     * @param bool|null $expose_as_alternative expose_as_alternative
     *
     * @return $this
     */
    public function setExposeAsAlternative(?bool $expose_as_alternative): static
    {
        if (is_null($expose_as_alternative)) {
            array_push($this->openAPINullablesSetToNull, 'expose_as_alternative');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('expose_as_alternative', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['expose_as_alternative'] = $expose_as_alternative;

        return $this;
    }

    /**
     * Gets parent_project_file_id
     *
     * @return int|null
     */
    public function getParentProjectFileId(): ?int
    {
        return $this->container['parent_project_file_id'];
    }

    /**
     * Sets parent_project_file_id
     *
     * @param int|null $parent_project_file_id parent_project_file_id
     *
     * @return $this
     */
    public function setParentProjectFileId(?int $parent_project_file_id): static
    {
        if (is_null($parent_project_file_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_project_file_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_project_file_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_project_file_id'] = $parent_project_file_id;

        return $this;
    }

    /**
     * Gets alternate_file_id
     *
     * @return int|null
     */
    public function getAlternateFileId(): ?int
    {
        return $this->container['alternate_file_id'];
    }

    /**
     * Sets alternate_file_id
     *
     * @param int|null $alternate_file_id alternate_file_id
     *
     * @return $this
     */
    public function setAlternateFileId(?int $alternate_file_id): static
    {
        if (is_null($alternate_file_id)) {
            array_push($this->openAPINullablesSetToNull, 'alternate_file_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alternate_file_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alternate_file_id'] = $alternate_file_id;

        return $this;
    }

    /**
     * Gets is_server_pack
     *
     * @return bool|null
     */
    public function getIsServerPack(): ?bool
    {
        return $this->container['is_server_pack'];
    }

    /**
     * Sets is_server_pack
     *
     * @param bool|null $is_server_pack is_server_pack
     *
     * @return $this
     */
    public function setIsServerPack(?bool $is_server_pack): static
    {
        if (is_null($is_server_pack)) {
            array_push($this->openAPINullablesSetToNull, 'is_server_pack');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_server_pack', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_server_pack'] = $is_server_pack;

        return $this;
    }

    /**
     * Gets server_pack_file_id
     *
     * @return int|null
     */
    public function getServerPackFileId(): ?int
    {
        return $this->container['server_pack_file_id'];
    }

    /**
     * Sets server_pack_file_id
     *
     * @param int|null $server_pack_file_id server_pack_file_id
     *
     * @return $this
     */
    public function setServerPackFileId(?int $server_pack_file_id): static
    {
        if (is_null($server_pack_file_id)) {
            array_push($this->openAPINullablesSetToNull, 'server_pack_file_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('server_pack_file_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['server_pack_file_id'] = $server_pack_file_id;

        return $this;
    }

    /**
     * Gets is_early_access_content
     *
     * @return bool|null
     */
    public function getIsEarlyAccessContent(): ?bool
    {
        return $this->container['is_early_access_content'];
    }

    /**
     * Sets is_early_access_content
     *
     * @param bool|null $is_early_access_content is_early_access_content
     *
     * @return $this
     */
    public function setIsEarlyAccessContent(?bool $is_early_access_content): static
    {
        if (is_null($is_early_access_content)) {
            array_push($this->openAPINullablesSetToNull, 'is_early_access_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_early_access_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_early_access_content'] = $is_early_access_content;

        return $this;
    }

    /**
     * Gets early_access_end_date
     *
     * @return \DateTime|null
     */
    public function getEarlyAccessEndDate(): ?\DateTime
    {
        return $this->container['early_access_end_date'];
    }

    /**
     * Sets early_access_end_date
     *
     * @param \DateTime|null $early_access_end_date early_access_end_date
     *
     * @return $this
     */
    public function setEarlyAccessEndDate(?\DateTime $early_access_end_date): static
    {
        if (is_null($early_access_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'early_access_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('early_access_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['early_access_end_date'] = $early_access_end_date;

        return $this;
    }

    /**
     * Gets file_fingerprint
     *
     * @return int|null
     */
    public function getFileFingerprint(): ?int
    {
        return $this->container['file_fingerprint'];
    }

    /**
     * Sets file_fingerprint
     *
     * @param int|null $file_fingerprint file_fingerprint
     *
     * @return $this
     */
    public function setFileFingerprint(?int $file_fingerprint): static
    {
        if (is_null($file_fingerprint)) {
            throw new InvalidArgumentException('non-nullable file_fingerprint cannot be null');
        }
        $this->container['file_fingerprint'] = $file_fingerprint;

        return $this;
    }

    /**
     * Gets modules
     *
     * @return \Aternos\CurseForgeApi\Model\FileModule[]|null
     */
    public function getModules(): ?array
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param \Aternos\CurseForgeApi\Model\FileModule[]|null $modules modules
     *
     * @return $this
     */
    public function setModules(?array $modules): static
    {
        if (is_null($modules)) {
            throw new InvalidArgumentException('non-nullable modules cannot be null');
        }
        $this->container['modules'] = $modules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


