<?php
/**
 * ModsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\CurseForgeApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aternos\CurseForgeApi\ApiException;
use Aternos\CurseForgeApi\Configuration;
use Aternos\CurseForgeApi\HeaderSelector;
use Aternos\CurseForgeApi\ObjectSerializer;

/**
 * ModsApi Class Doc Comment
 *
 * @category Class
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getFeaturedMods' => [
            'application/json',
        ],
        'getMod' => [
            'application/json',
        ],
        'getModDescription' => [
            'application/json',
        ],
        'getMods' => [
            'application/json',
        ],
        'searchMods' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getFeaturedMods
     *
     * Get featured mods.
     *
     * @param  \Aternos\CurseForgeApi\Model\GetFeaturedModsRequestBody $get_featured_mods_request_body get_featured_mods_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeaturedMods'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\GetFeaturedModsResponse
     */
    public function getFeaturedMods($get_featured_mods_request_body, string $contentType = self::contentTypes['getFeaturedMods'][0])
    {
        list($response) = $this->getFeaturedModsWithHttpInfo($get_featured_mods_request_body, $contentType);
        return $response;
    }

    /**
     * Operation getFeaturedModsWithHttpInfo
     *
     * Get featured mods.
     *
     * @param  \Aternos\CurseForgeApi\Model\GetFeaturedModsRequestBody $get_featured_mods_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeaturedMods'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\GetFeaturedModsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFeaturedModsWithHttpInfo($get_featured_mods_request_body, string $contentType = self::contentTypes['getFeaturedMods'][0])
    {
        $request = $this->getFeaturedModsRequest($get_featured_mods_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\GetFeaturedModsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\GetFeaturedModsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\GetFeaturedModsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\GetFeaturedModsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\GetFeaturedModsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFeaturedModsAsync
     *
     * Get featured mods.
     *
     * @param  \Aternos\CurseForgeApi\Model\GetFeaturedModsRequestBody $get_featured_mods_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeaturedMods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeaturedModsAsync($get_featured_mods_request_body, string $contentType = self::contentTypes['getFeaturedMods'][0])
    {
        return $this->getFeaturedModsAsyncWithHttpInfo($get_featured_mods_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFeaturedModsAsyncWithHttpInfo
     *
     * Get featured mods.
     *
     * @param  \Aternos\CurseForgeApi\Model\GetFeaturedModsRequestBody $get_featured_mods_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeaturedMods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFeaturedModsAsyncWithHttpInfo($get_featured_mods_request_body, string $contentType = self::contentTypes['getFeaturedMods'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\GetFeaturedModsResponse';
        $request = $this->getFeaturedModsRequest($get_featured_mods_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFeaturedMods'
     *
     * @param  \Aternos\CurseForgeApi\Model\GetFeaturedModsRequestBody $get_featured_mods_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFeaturedMods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFeaturedModsRequest($get_featured_mods_request_body, string $contentType = self::contentTypes['getFeaturedMods'][0])
    {

        // verify the required parameter 'get_featured_mods_request_body' is set
        if ($get_featured_mods_request_body === null || (is_array($get_featured_mods_request_body) && count($get_featured_mods_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_featured_mods_request_body when calling getFeaturedMods'
            );
        }


        $resourcePath = '/v1/mods/featured';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_featured_mods_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_featured_mods_request_body));
            } else {
                $httpBody = $get_featured_mods_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMod
     *
     * Get a single mod.
     *
     * @param  int $mod_id The mod id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMod'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\GetModResponse
     */
    public function getMod($mod_id, string $contentType = self::contentTypes['getMod'][0])
    {
        list($response) = $this->getModWithHttpInfo($mod_id, $contentType);
        return $response;
    }

    /**
     * Operation getModWithHttpInfo
     *
     * Get a single mod.
     *
     * @param  int $mod_id The mod id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMod'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\GetModResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModWithHttpInfo($mod_id, string $contentType = self::contentTypes['getMod'][0])
    {
        $request = $this->getModRequest($mod_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\GetModResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\GetModResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\GetModResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\GetModResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\GetModResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModAsync
     *
     * Get a single mod.
     *
     * @param  int $mod_id The mod id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModAsync($mod_id, string $contentType = self::contentTypes['getMod'][0])
    {
        return $this->getModAsyncWithHttpInfo($mod_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModAsyncWithHttpInfo
     *
     * Get a single mod.
     *
     * @param  int $mod_id The mod id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModAsyncWithHttpInfo($mod_id, string $contentType = self::contentTypes['getMod'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\GetModResponse';
        $request = $this->getModRequest($mod_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMod'
     *
     * @param  int $mod_id The mod id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModRequest($mod_id, string $contentType = self::contentTypes['getMod'][0])
    {

        // verify the required parameter 'mod_id' is set
        if ($mod_id === null || (is_array($mod_id) && count($mod_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_id when calling getMod'
            );
        }


        $resourcePath = '/v1/mods/{modId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mod_id !== null) {
            $resourcePath = str_replace(
                '{' . 'modId' . '}',
                ObjectSerializer::toPathValue($mod_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModDescription
     *
     * Get mod description.
     *
     * @param  int $mod_id The mod id. (required)
     * @param  bool|null $raw Get raw description without things like external link redirects (optional)
     * @param  bool|null $stripped Get the description with all HTML tags removed (optional)
     * @param  bool|null $markup markup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModDescription'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\ModDescriptionResponse
     */
    public function getModDescription($mod_id, $raw = null, $stripped = null, $markup = null, string $contentType = self::contentTypes['getModDescription'][0])
    {
        list($response) = $this->getModDescriptionWithHttpInfo($mod_id, $raw, $stripped, $markup, $contentType);
        return $response;
    }

    /**
     * Operation getModDescriptionWithHttpInfo
     *
     * Get mod description.
     *
     * @param  int $mod_id The mod id. (required)
     * @param  bool|null $raw Get raw description without things like external link redirects (optional)
     * @param  bool|null $stripped Get the description with all HTML tags removed (optional)
     * @param  bool|null $markup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModDescription'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\ModDescriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModDescriptionWithHttpInfo($mod_id, $raw = null, $stripped = null, $markup = null, string $contentType = self::contentTypes['getModDescription'][0])
    {
        $request = $this->getModDescriptionRequest($mod_id, $raw, $stripped, $markup, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\ModDescriptionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\ModDescriptionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\ModDescriptionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\ModDescriptionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\ModDescriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModDescriptionAsync
     *
     * Get mod description.
     *
     * @param  int $mod_id The mod id. (required)
     * @param  bool|null $raw Get raw description without things like external link redirects (optional)
     * @param  bool|null $stripped Get the description with all HTML tags removed (optional)
     * @param  bool|null $markup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModDescriptionAsync($mod_id, $raw = null, $stripped = null, $markup = null, string $contentType = self::contentTypes['getModDescription'][0])
    {
        return $this->getModDescriptionAsyncWithHttpInfo($mod_id, $raw, $stripped, $markup, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModDescriptionAsyncWithHttpInfo
     *
     * Get mod description.
     *
     * @param  int $mod_id The mod id. (required)
     * @param  bool|null $raw Get raw description without things like external link redirects (optional)
     * @param  bool|null $stripped Get the description with all HTML tags removed (optional)
     * @param  bool|null $markup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModDescriptionAsyncWithHttpInfo($mod_id, $raw = null, $stripped = null, $markup = null, string $contentType = self::contentTypes['getModDescription'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\ModDescriptionResponse';
        $request = $this->getModDescriptionRequest($mod_id, $raw, $stripped, $markup, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModDescription'
     *
     * @param  int $mod_id The mod id. (required)
     * @param  bool|null $raw Get raw description without things like external link redirects (optional)
     * @param  bool|null $stripped Get the description with all HTML tags removed (optional)
     * @param  bool|null $markup (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModDescriptionRequest($mod_id, $raw = null, $stripped = null, $markup = null, string $contentType = self::contentTypes['getModDescription'][0])
    {

        // verify the required parameter 'mod_id' is set
        if ($mod_id === null || (is_array($mod_id) && count($mod_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_id when calling getModDescription'
            );
        }





        $resourcePath = '/v1/mods/{modId}/description';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $raw,
            'raw', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stripped,
            'stripped', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $markup,
            'markup', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($mod_id !== null) {
            $resourcePath = str_replace(
                '{' . 'modId' . '}',
                ObjectSerializer::toPathValue($mod_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getMods
     *
     * Get a list of mods.
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModsByIdsListRequestBody $get_mods_by_ids_list_request_body get_mods_by_ids_list_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMods'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\GetModsResponse
     */
    public function getMods($get_mods_by_ids_list_request_body, string $contentType = self::contentTypes['getMods'][0])
    {
        list($response) = $this->getModsWithHttpInfo($get_mods_by_ids_list_request_body, $contentType);
        return $response;
    }

    /**
     * Operation getModsWithHttpInfo
     *
     * Get a list of mods.
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModsByIdsListRequestBody $get_mods_by_ids_list_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMods'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\GetModsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModsWithHttpInfo($get_mods_by_ids_list_request_body, string $contentType = self::contentTypes['getMods'][0])
    {
        $request = $this->getModsRequest($get_mods_by_ids_list_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\GetModsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\GetModsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\GetModsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\GetModsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\GetModsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModsAsync
     *
     * Get a list of mods.
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModsByIdsListRequestBody $get_mods_by_ids_list_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModsAsync($get_mods_by_ids_list_request_body, string $contentType = self::contentTypes['getMods'][0])
    {
        return $this->getModsAsyncWithHttpInfo($get_mods_by_ids_list_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModsAsyncWithHttpInfo
     *
     * Get a list of mods.
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModsByIdsListRequestBody $get_mods_by_ids_list_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModsAsyncWithHttpInfo($get_mods_by_ids_list_request_body, string $contentType = self::contentTypes['getMods'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\GetModsResponse';
        $request = $this->getModsRequest($get_mods_by_ids_list_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getMods'
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModsByIdsListRequestBody $get_mods_by_ids_list_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModsRequest($get_mods_by_ids_list_request_body, string $contentType = self::contentTypes['getMods'][0])
    {

        // verify the required parameter 'get_mods_by_ids_list_request_body' is set
        if ($get_mods_by_ids_list_request_body === null || (is_array($get_mods_by_ids_list_request_body) && count($get_mods_by_ids_list_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_mods_by_ids_list_request_body when calling getMods'
            );
        }


        $resourcePath = '/v1/mods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_mods_by_ids_list_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_mods_by_ids_list_request_body));
            } else {
                $httpBody = $get_mods_by_ids_list_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchMods
     *
     * Get all mods that match the search criteria.
     *
     * @param  int $game_id Filter by game id. (required)
     * @param  int|null $class_id Filter by section id (discoverable via Categories) (optional)
     * @param  int|null $category_id Filter by category id (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  string|null $search_filter Filter by free text search in the mod name and author (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModsSearchSortField|null $sort_field Filter by ModsSearchSortField enumeration (optional)
     * @param  \Aternos\CurseForgeApi\Model\SortOrder|null $sort_order &#39;asc&#39; if sort is in ascending order, &#39;desc&#39; if sort is in descending order (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type Filter only mods associated to a given modloader (Forge, Fabric ...). Must be coupled with gameVersion. (optional)
     * @param  int|null $game_version_type_id Filter only mods that contain files tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $author_id Filter only mods that the given authorId is a member of. (optional)
     * @param  string|null $slug Filter by slug (coupled with classId will result in a unique result). (optional)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  int[]|null $category_ids Filter by a list of category ids. this will override categoryId. (optional)
     * @param  string[]|null $game_versions Filter by a list of game version strings. This will override gameVersion. (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType[]|null $mod_loader_types Filter by a list of modloader types. This will override modLoaderType. (optional)
     * @param  int|null $primary_author_id Filter only mods that the given primaryAuthorId is the owner of. (optional)
     * @param  \Aternos\CurseForgeApi\Model\PremiumType|null $premium_type Filter only mods that are Premium or not. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMods'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\SearchModsResponse
     */
    public function searchMods($game_id, $class_id = null, $category_id = null, $game_version = null, $search_filter = null, $sort_field = null, $sort_order = null, $mod_loader_type = null, $game_version_type_id = null, $author_id = null, $slug = null, $index = null, $page_size = null, $category_ids = null, $game_versions = null, $mod_loader_types = null, $primary_author_id = null, $premium_type = null, string $contentType = self::contentTypes['searchMods'][0])
    {
        list($response) = $this->searchModsWithHttpInfo($game_id, $class_id, $category_id, $game_version, $search_filter, $sort_field, $sort_order, $mod_loader_type, $game_version_type_id, $author_id, $slug, $index, $page_size, $category_ids, $game_versions, $mod_loader_types, $primary_author_id, $premium_type, $contentType);
        return $response;
    }

    /**
     * Operation searchModsWithHttpInfo
     *
     * Get all mods that match the search criteria.
     *
     * @param  int $game_id Filter by game id. (required)
     * @param  int|null $class_id Filter by section id (discoverable via Categories) (optional)
     * @param  int|null $category_id Filter by category id (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  string|null $search_filter Filter by free text search in the mod name and author (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModsSearchSortField|null $sort_field Filter by ModsSearchSortField enumeration (optional)
     * @param  \Aternos\CurseForgeApi\Model\SortOrder|null $sort_order &#39;asc&#39; if sort is in ascending order, &#39;desc&#39; if sort is in descending order (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type Filter only mods associated to a given modloader (Forge, Fabric ...). Must be coupled with gameVersion. (optional)
     * @param  int|null $game_version_type_id Filter only mods that contain files tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $author_id Filter only mods that the given authorId is a member of. (optional)
     * @param  string|null $slug Filter by slug (coupled with classId will result in a unique result). (optional)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  int[]|null $category_ids Filter by a list of category ids. this will override categoryId. (optional)
     * @param  string[]|null $game_versions Filter by a list of game version strings. This will override gameVersion. (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType[]|null $mod_loader_types Filter by a list of modloader types. This will override modLoaderType. (optional)
     * @param  int|null $primary_author_id Filter only mods that the given primaryAuthorId is the owner of. (optional)
     * @param  \Aternos\CurseForgeApi\Model\PremiumType|null $premium_type Filter only mods that are Premium or not. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMods'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\SearchModsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchModsWithHttpInfo($game_id, $class_id = null, $category_id = null, $game_version = null, $search_filter = null, $sort_field = null, $sort_order = null, $mod_loader_type = null, $game_version_type_id = null, $author_id = null, $slug = null, $index = null, $page_size = null, $category_ids = null, $game_versions = null, $mod_loader_types = null, $primary_author_id = null, $premium_type = null, string $contentType = self::contentTypes['searchMods'][0])
    {
        $request = $this->searchModsRequest($game_id, $class_id, $category_id, $game_version, $search_filter, $sort_field, $sort_order, $mod_loader_type, $game_version_type_id, $author_id, $slug, $index, $page_size, $category_ids, $game_versions, $mod_loader_types, $primary_author_id, $premium_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\SearchModsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\SearchModsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\SearchModsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\SearchModsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\SearchModsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchModsAsync
     *
     * Get all mods that match the search criteria.
     *
     * @param  int $game_id Filter by game id. (required)
     * @param  int|null $class_id Filter by section id (discoverable via Categories) (optional)
     * @param  int|null $category_id Filter by category id (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  string|null $search_filter Filter by free text search in the mod name and author (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModsSearchSortField|null $sort_field Filter by ModsSearchSortField enumeration (optional)
     * @param  \Aternos\CurseForgeApi\Model\SortOrder|null $sort_order &#39;asc&#39; if sort is in ascending order, &#39;desc&#39; if sort is in descending order (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type Filter only mods associated to a given modloader (Forge, Fabric ...). Must be coupled with gameVersion. (optional)
     * @param  int|null $game_version_type_id Filter only mods that contain files tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $author_id Filter only mods that the given authorId is a member of. (optional)
     * @param  string|null $slug Filter by slug (coupled with classId will result in a unique result). (optional)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  int[]|null $category_ids Filter by a list of category ids. this will override categoryId. (optional)
     * @param  string[]|null $game_versions Filter by a list of game version strings. This will override gameVersion. (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType[]|null $mod_loader_types Filter by a list of modloader types. This will override modLoaderType. (optional)
     * @param  int|null $primary_author_id Filter only mods that the given primaryAuthorId is the owner of. (optional)
     * @param  \Aternos\CurseForgeApi\Model\PremiumType|null $premium_type Filter only mods that are Premium or not. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchModsAsync($game_id, $class_id = null, $category_id = null, $game_version = null, $search_filter = null, $sort_field = null, $sort_order = null, $mod_loader_type = null, $game_version_type_id = null, $author_id = null, $slug = null, $index = null, $page_size = null, $category_ids = null, $game_versions = null, $mod_loader_types = null, $primary_author_id = null, $premium_type = null, string $contentType = self::contentTypes['searchMods'][0])
    {
        return $this->searchModsAsyncWithHttpInfo($game_id, $class_id, $category_id, $game_version, $search_filter, $sort_field, $sort_order, $mod_loader_type, $game_version_type_id, $author_id, $slug, $index, $page_size, $category_ids, $game_versions, $mod_loader_types, $primary_author_id, $premium_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchModsAsyncWithHttpInfo
     *
     * Get all mods that match the search criteria.
     *
     * @param  int $game_id Filter by game id. (required)
     * @param  int|null $class_id Filter by section id (discoverable via Categories) (optional)
     * @param  int|null $category_id Filter by category id (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  string|null $search_filter Filter by free text search in the mod name and author (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModsSearchSortField|null $sort_field Filter by ModsSearchSortField enumeration (optional)
     * @param  \Aternos\CurseForgeApi\Model\SortOrder|null $sort_order &#39;asc&#39; if sort is in ascending order, &#39;desc&#39; if sort is in descending order (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type Filter only mods associated to a given modloader (Forge, Fabric ...). Must be coupled with gameVersion. (optional)
     * @param  int|null $game_version_type_id Filter only mods that contain files tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $author_id Filter only mods that the given authorId is a member of. (optional)
     * @param  string|null $slug Filter by slug (coupled with classId will result in a unique result). (optional)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  int[]|null $category_ids Filter by a list of category ids. this will override categoryId. (optional)
     * @param  string[]|null $game_versions Filter by a list of game version strings. This will override gameVersion. (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType[]|null $mod_loader_types Filter by a list of modloader types. This will override modLoaderType. (optional)
     * @param  int|null $primary_author_id Filter only mods that the given primaryAuthorId is the owner of. (optional)
     * @param  \Aternos\CurseForgeApi\Model\PremiumType|null $premium_type Filter only mods that are Premium or not. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchModsAsyncWithHttpInfo($game_id, $class_id = null, $category_id = null, $game_version = null, $search_filter = null, $sort_field = null, $sort_order = null, $mod_loader_type = null, $game_version_type_id = null, $author_id = null, $slug = null, $index = null, $page_size = null, $category_ids = null, $game_versions = null, $mod_loader_types = null, $primary_author_id = null, $premium_type = null, string $contentType = self::contentTypes['searchMods'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\SearchModsResponse';
        $request = $this->searchModsRequest($game_id, $class_id, $category_id, $game_version, $search_filter, $sort_field, $sort_order, $mod_loader_type, $game_version_type_id, $author_id, $slug, $index, $page_size, $category_ids, $game_versions, $mod_loader_types, $primary_author_id, $premium_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchMods'
     *
     * @param  int $game_id Filter by game id. (required)
     * @param  int|null $class_id Filter by section id (discoverable via Categories) (optional)
     * @param  int|null $category_id Filter by category id (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  string|null $search_filter Filter by free text search in the mod name and author (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModsSearchSortField|null $sort_field Filter by ModsSearchSortField enumeration (optional)
     * @param  \Aternos\CurseForgeApi\Model\SortOrder|null $sort_order &#39;asc&#39; if sort is in ascending order, &#39;desc&#39; if sort is in descending order (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type Filter only mods associated to a given modloader (Forge, Fabric ...). Must be coupled with gameVersion. (optional)
     * @param  int|null $game_version_type_id Filter only mods that contain files tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $author_id Filter only mods that the given authorId is a member of. (optional)
     * @param  string|null $slug Filter by slug (coupled with classId will result in a unique result). (optional)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  int[]|null $category_ids Filter by a list of category ids. this will override categoryId. (optional)
     * @param  string[]|null $game_versions Filter by a list of game version strings. This will override gameVersion. (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType[]|null $mod_loader_types Filter by a list of modloader types. This will override modLoaderType. (optional)
     * @param  int|null $primary_author_id Filter only mods that the given primaryAuthorId is the owner of. (optional)
     * @param  \Aternos\CurseForgeApi\Model\PremiumType|null $premium_type Filter only mods that are Premium or not. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMods'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchModsRequest($game_id, $class_id = null, $category_id = null, $game_version = null, $search_filter = null, $sort_field = null, $sort_order = null, $mod_loader_type = null, $game_version_type_id = null, $author_id = null, $slug = null, $index = null, $page_size = null, $category_ids = null, $game_versions = null, $mod_loader_types = null, $primary_author_id = null, $premium_type = null, string $contentType = self::contentTypes['searchMods'][0])
    {

        // verify the required parameter 'game_id' is set
        if ($game_id === null || (is_array($game_id) && count($game_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $game_id when calling searchMods'
            );
        }













        if ($category_ids !== null && count($category_ids) > 10) {
            throw new \InvalidArgumentException('invalid value for "$category_ids" when calling ModsApi.searchMods, number of items must be less than or equal to 10.');
        }
        
        if ($game_versions !== null && count($game_versions) > 4) {
            throw new \InvalidArgumentException('invalid value for "$game_versions" when calling ModsApi.searchMods, number of items must be less than or equal to 4.');
        }
        
        if ($mod_loader_types !== null && count($mod_loader_types) > 5) {
            throw new \InvalidArgumentException('invalid value for "$mod_loader_types" when calling ModsApi.searchMods, number of items must be less than or equal to 5.');
        }
        



        $resourcePath = '/v1/mods/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $game_id,
            'gameId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $class_id,
            'classId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_id,
            'categoryId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $game_version,
            'gameVersion', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_filter,
            'searchFilter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_field,
            'sortField', // param base name
            'ModsSearchSortField', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'SortOrder', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mod_loader_type,
            'modLoaderType', // param base name
            'ModLoaderType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $game_version_type_id,
            'gameVersionTypeId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $author_id,
            'authorId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $slug,
            'slug', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $index,
            'index', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category_ids,
            'categoryIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $game_versions,
            'gameVersions', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mod_loader_types,
            'modLoaderTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $primary_author_id,
            'primaryAuthorId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $premium_type,
            'PremiumType', // param base name
            'PremiumType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
