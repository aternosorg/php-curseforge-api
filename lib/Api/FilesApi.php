<?php
/**
 * FilesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Aternos\CurseForgeApi\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aternos\CurseForgeApi\ApiException;
use Aternos\CurseForgeApi\Configuration;
use Aternos\CurseForgeApi\HeaderSelector;
use Aternos\CurseForgeApi\ObjectSerializer;

/**
 * FilesApi Class Doc Comment
 *
 * @category Class
 * @package  Aternos\CurseForgeApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getFiles' => [
            'application/json',
        ],
        'getModFile' => [
            'application/json',
        ],
        'getModFileChangelog' => [
            'application/json',
        ],
        'getModFileDownloadURL' => [
            'application/json',
        ],
        'getModFiles' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getFiles
     *
     * Get files
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModFilesRequestBody $get_mod_files_request_body get_mod_files_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFiles'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\GetFilesResponse
     */
    public function getFiles($get_mod_files_request_body, string $contentType = self::contentTypes['getFiles'][0])
    {
        list($response) = $this->getFilesWithHttpInfo($get_mod_files_request_body, $contentType);
        return $response;
    }

    /**
     * Operation getFilesWithHttpInfo
     *
     * Get files
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModFilesRequestBody $get_mod_files_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFiles'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\GetFilesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFilesWithHttpInfo($get_mod_files_request_body, string $contentType = self::contentTypes['getFiles'][0])
    {
        $request = $this->getFilesRequest($get_mod_files_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\GetFilesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\GetFilesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\GetFilesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\GetFilesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\GetFilesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFilesAsync
     *
     * Get files
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModFilesRequestBody $get_mod_files_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFilesAsync($get_mod_files_request_body, string $contentType = self::contentTypes['getFiles'][0])
    {
        return $this->getFilesAsyncWithHttpInfo($get_mod_files_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFilesAsyncWithHttpInfo
     *
     * Get files
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModFilesRequestBody $get_mod_files_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFilesAsyncWithHttpInfo($get_mod_files_request_body, string $contentType = self::contentTypes['getFiles'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\GetFilesResponse';
        $request = $this->getFilesRequest($get_mod_files_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getFiles'
     *
     * @param  \Aternos\CurseForgeApi\Model\GetModFilesRequestBody $get_mod_files_request_body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFilesRequest($get_mod_files_request_body, string $contentType = self::contentTypes['getFiles'][0])
    {

        // verify the required parameter 'get_mod_files_request_body' is set
        if ($get_mod_files_request_body === null || (is_array($get_mod_files_request_body) && count($get_mod_files_request_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_mod_files_request_body when calling getFiles'
            );
        }


        $resourcePath = '/v1/mods/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($get_mod_files_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($get_mod_files_request_body));
            } else {
                $httpBody = $get_mod_files_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModFile
     *
     * Get mod file.
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFile'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\GetModFileResponse
     */
    public function getModFile($mod_id, $file_id, string $contentType = self::contentTypes['getModFile'][0])
    {
        list($response) = $this->getModFileWithHttpInfo($mod_id, $file_id, $contentType);
        return $response;
    }

    /**
     * Operation getModFileWithHttpInfo
     *
     * Get mod file.
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFile'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\GetModFileResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModFileWithHttpInfo($mod_id, $file_id, string $contentType = self::contentTypes['getModFile'][0])
    {
        $request = $this->getModFileRequest($mod_id, $file_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\GetModFileResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\GetModFileResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\GetModFileResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\GetModFileResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\GetModFileResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModFileAsync
     *
     * Get mod file.
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModFileAsync($mod_id, $file_id, string $contentType = self::contentTypes['getModFile'][0])
    {
        return $this->getModFileAsyncWithHttpInfo($mod_id, $file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModFileAsyncWithHttpInfo
     *
     * Get mod file.
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModFileAsyncWithHttpInfo($mod_id, $file_id, string $contentType = self::contentTypes['getModFile'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\GetModFileResponse';
        $request = $this->getModFileRequest($mod_id, $file_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModFile'
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModFileRequest($mod_id, $file_id, string $contentType = self::contentTypes['getModFile'][0])
    {

        // verify the required parameter 'mod_id' is set
        if ($mod_id === null || (is_array($mod_id) && count($mod_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_id when calling getModFile'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling getModFile'
            );
        }


        $resourcePath = '/v1/mods/{modId}/files/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mod_id !== null) {
            $resourcePath = str_replace(
                '{' . 'modId' . '}',
                ObjectSerializer::toPathValue($mod_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModFileChangelog
     *
     * Get mod file changelog
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileChangelog'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\GetModFileChangelogResponse
     */
    public function getModFileChangelog($mod_id, $file_id, string $contentType = self::contentTypes['getModFileChangelog'][0])
    {
        list($response) = $this->getModFileChangelogWithHttpInfo($mod_id, $file_id, $contentType);
        return $response;
    }

    /**
     * Operation getModFileChangelogWithHttpInfo
     *
     * Get mod file changelog
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileChangelog'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\GetModFileChangelogResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModFileChangelogWithHttpInfo($mod_id, $file_id, string $contentType = self::contentTypes['getModFileChangelog'][0])
    {
        $request = $this->getModFileChangelogRequest($mod_id, $file_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\GetModFileChangelogResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\GetModFileChangelogResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\GetModFileChangelogResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\GetModFileChangelogResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\GetModFileChangelogResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModFileChangelogAsync
     *
     * Get mod file changelog
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileChangelog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModFileChangelogAsync($mod_id, $file_id, string $contentType = self::contentTypes['getModFileChangelog'][0])
    {
        return $this->getModFileChangelogAsyncWithHttpInfo($mod_id, $file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModFileChangelogAsyncWithHttpInfo
     *
     * Get mod file changelog
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileChangelog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModFileChangelogAsyncWithHttpInfo($mod_id, $file_id, string $contentType = self::contentTypes['getModFileChangelog'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\GetModFileChangelogResponse';
        $request = $this->getModFileChangelogRequest($mod_id, $file_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModFileChangelog'
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileChangelog'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModFileChangelogRequest($mod_id, $file_id, string $contentType = self::contentTypes['getModFileChangelog'][0])
    {

        // verify the required parameter 'mod_id' is set
        if ($mod_id === null || (is_array($mod_id) && count($mod_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_id when calling getModFileChangelog'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling getModFileChangelog'
            );
        }


        $resourcePath = '/v1/mods/{modId}/files/{fileId}/changelog';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mod_id !== null) {
            $resourcePath = str_replace(
                '{' . 'modId' . '}',
                ObjectSerializer::toPathValue($mod_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModFileDownloadURL
     *
     * Get Mod File Download URL
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileDownloadURL'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\GetModFileDownloadURLResponse
     */
    public function getModFileDownloadURL($mod_id, $file_id, string $contentType = self::contentTypes['getModFileDownloadURL'][0])
    {
        list($response) = $this->getModFileDownloadURLWithHttpInfo($mod_id, $file_id, $contentType);
        return $response;
    }

    /**
     * Operation getModFileDownloadURLWithHttpInfo
     *
     * Get Mod File Download URL
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileDownloadURL'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\GetModFileDownloadURLResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModFileDownloadURLWithHttpInfo($mod_id, $file_id, string $contentType = self::contentTypes['getModFileDownloadURL'][0])
    {
        $request = $this->getModFileDownloadURLRequest($mod_id, $file_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\GetModFileDownloadURLResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\GetModFileDownloadURLResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\GetModFileDownloadURLResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\GetModFileDownloadURLResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\GetModFileDownloadURLResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModFileDownloadURLAsync
     *
     * Get Mod File Download URL
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileDownloadURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModFileDownloadURLAsync($mod_id, $file_id, string $contentType = self::contentTypes['getModFileDownloadURL'][0])
    {
        return $this->getModFileDownloadURLAsyncWithHttpInfo($mod_id, $file_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModFileDownloadURLAsyncWithHttpInfo
     *
     * Get Mod File Download URL
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileDownloadURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModFileDownloadURLAsyncWithHttpInfo($mod_id, $file_id, string $contentType = self::contentTypes['getModFileDownloadURL'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\GetModFileDownloadURLResponse';
        $request = $this->getModFileDownloadURLRequest($mod_id, $file_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModFileDownloadURL'
     *
     * @param  int $mod_id The mod id the file belongs to (required)
     * @param  int $file_id The file id. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFileDownloadURL'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModFileDownloadURLRequest($mod_id, $file_id, string $contentType = self::contentTypes['getModFileDownloadURL'][0])
    {

        // verify the required parameter 'mod_id' is set
        if ($mod_id === null || (is_array($mod_id) && count($mod_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_id when calling getModFileDownloadURL'
            );
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null || (is_array($file_id) && count($file_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling getModFileDownloadURL'
            );
        }


        $resourcePath = '/v1/mods/{modId}/files/{fileId}/download-url';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($mod_id !== null) {
            $resourcePath = str_replace(
                '{' . 'modId' . '}',
                ObjectSerializer::toPathValue($mod_id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getModFiles
     *
     * Get mod files.
     *
     * @param  int $mod_id The mod id the files belong to (required)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type ModLoaderType enumeration Filter only files associated to a given modloader (Forge, Fabric ...). (optional)
     * @param  int|null $game_version_type_id Filter only files that are tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $older_than_project_file_id Filter only files older than the given file ID (optional)
     * @param  \Aternos\CurseForgeApi\Model\FileReleaseType[]|null $release_types Filter only files that are of the given release types (optional)
     * @param  \Aternos\CurseForgeApi\Model\PlatformType|null $platform_type Filter only files supporting the given platform type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFiles'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Aternos\CurseForgeApi\Model\GetModFilesResponse
     */
    public function getModFiles($mod_id, $index = null, $page_size = null, $game_version = null, $mod_loader_type = null, $game_version_type_id = null, $older_than_project_file_id = null, $release_types = null, $platform_type = null, string $contentType = self::contentTypes['getModFiles'][0])
    {
        list($response) = $this->getModFilesWithHttpInfo($mod_id, $index, $page_size, $game_version, $mod_loader_type, $game_version_type_id, $older_than_project_file_id, $release_types, $platform_type, $contentType);
        return $response;
    }

    /**
     * Operation getModFilesWithHttpInfo
     *
     * Get mod files.
     *
     * @param  int $mod_id The mod id the files belong to (required)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type ModLoaderType enumeration Filter only files associated to a given modloader (Forge, Fabric ...). (optional)
     * @param  int|null $game_version_type_id Filter only files that are tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $older_than_project_file_id Filter only files older than the given file ID (optional)
     * @param  \Aternos\CurseForgeApi\Model\FileReleaseType[]|null $release_types Filter only files that are of the given release types (optional)
     * @param  \Aternos\CurseForgeApi\Model\PlatformType|null $platform_type Filter only files supporting the given platform type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFiles'] to see the possible values for this operation
     *
     * @throws \Aternos\CurseForgeApi\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Aternos\CurseForgeApi\Model\GetModFilesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getModFilesWithHttpInfo($mod_id, $index = null, $page_size = null, $game_version = null, $mod_loader_type = null, $game_version_type_id = null, $older_than_project_file_id = null, $release_types = null, $platform_type = null, string $contentType = self::contentTypes['getModFiles'][0])
    {
        $request = $this->getModFilesRequest($mod_id, $index, $page_size, $game_version, $mod_loader_type, $game_version_type_id, $older_than_project_file_id, $release_types, $platform_type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Aternos\CurseForgeApi\Model\GetModFilesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Aternos\CurseForgeApi\Model\GetModFilesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Aternos\CurseForgeApi\Model\GetModFilesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Aternos\CurseForgeApi\Model\GetModFilesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Aternos\CurseForgeApi\Model\GetModFilesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getModFilesAsync
     *
     * Get mod files.
     *
     * @param  int $mod_id The mod id the files belong to (required)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type ModLoaderType enumeration Filter only files associated to a given modloader (Forge, Fabric ...). (optional)
     * @param  int|null $game_version_type_id Filter only files that are tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $older_than_project_file_id Filter only files older than the given file ID (optional)
     * @param  \Aternos\CurseForgeApi\Model\FileReleaseType[]|null $release_types Filter only files that are of the given release types (optional)
     * @param  \Aternos\CurseForgeApi\Model\PlatformType|null $platform_type Filter only files supporting the given platform type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModFilesAsync($mod_id, $index = null, $page_size = null, $game_version = null, $mod_loader_type = null, $game_version_type_id = null, $older_than_project_file_id = null, $release_types = null, $platform_type = null, string $contentType = self::contentTypes['getModFiles'][0])
    {
        return $this->getModFilesAsyncWithHttpInfo($mod_id, $index, $page_size, $game_version, $mod_loader_type, $game_version_type_id, $older_than_project_file_id, $release_types, $platform_type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getModFilesAsyncWithHttpInfo
     *
     * Get mod files.
     *
     * @param  int $mod_id The mod id the files belong to (required)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type ModLoaderType enumeration Filter only files associated to a given modloader (Forge, Fabric ...). (optional)
     * @param  int|null $game_version_type_id Filter only files that are tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $older_than_project_file_id Filter only files older than the given file ID (optional)
     * @param  \Aternos\CurseForgeApi\Model\FileReleaseType[]|null $release_types Filter only files that are of the given release types (optional)
     * @param  \Aternos\CurseForgeApi\Model\PlatformType|null $platform_type Filter only files supporting the given platform type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getModFilesAsyncWithHttpInfo($mod_id, $index = null, $page_size = null, $game_version = null, $mod_loader_type = null, $game_version_type_id = null, $older_than_project_file_id = null, $release_types = null, $platform_type = null, string $contentType = self::contentTypes['getModFiles'][0])
    {
        $returnType = '\Aternos\CurseForgeApi\Model\GetModFilesResponse';
        $request = $this->getModFilesRequest($mod_id, $index, $page_size, $game_version, $mod_loader_type, $game_version_type_id, $older_than_project_file_id, $release_types, $platform_type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getModFiles'
     *
     * @param  int $mod_id The mod id the files belong to (required)
     * @param  int|null $index A zero based index of the first item to include in the response, the limit is: (index + pageSize &lt;&#x3D; 10,000). (optional)
     * @param  int|null $page_size The number of items to include in the response, the default/maximum value is 50. (optional)
     * @param  string|null $game_version Filter by game version string (optional)
     * @param  \Aternos\CurseForgeApi\Model\ModLoaderType|null $mod_loader_type ModLoaderType enumeration Filter only files associated to a given modloader (Forge, Fabric ...). (optional)
     * @param  int|null $game_version_type_id Filter only files that are tagged with versions of the given gameVersionTypeId (optional)
     * @param  int|null $older_than_project_file_id Filter only files older than the given file ID (optional)
     * @param  \Aternos\CurseForgeApi\Model\FileReleaseType[]|null $release_types Filter only files that are of the given release types (optional)
     * @param  \Aternos\CurseForgeApi\Model\PlatformType|null $platform_type Filter only files supporting the given platform type (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getModFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getModFilesRequest($mod_id, $index = null, $page_size = null, $game_version = null, $mod_loader_type = null, $game_version_type_id = null, $older_than_project_file_id = null, $release_types = null, $platform_type = null, string $contentType = self::contentTypes['getModFiles'][0])
    {

        // verify the required parameter 'mod_id' is set
        if ($mod_id === null || (is_array($mod_id) && count($mod_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mod_id when calling getModFiles'
            );
        }










        $resourcePath = '/v1/mods/{modId}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $index,
            'index', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $game_version,
            'gameVersion', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mod_loader_type,
            'modLoaderType', // param base name
            'ModLoaderType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $game_version_type_id,
            'gameVersionTypeId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $older_than_project_file_id,
            'olderThanProjectFileId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $release_types,
            'releaseTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $platform_type,
            'platformType', // param base name
            'PlatformType', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($mod_id !== null) {
            $resourcePath = str_replace(
                '{' . 'modId' . '}',
                ObjectSerializer::toPathValue($mod_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
